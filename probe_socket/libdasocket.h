#ifndef __LIBDASOCKET_H__
#define __LIBDASOCKET_H__

HANDLER_WRAPPERS_DEF(int, socket, int, domain, int, type, int, protocol);
HANDLER_WRAPPERS_DEF(int, accept, int, socket, struct sockaddr *, address, socklen_t *, address_len);
HANDLER_WRAPPERS_DEF(int, accept4, int, sockfd, struct sockaddr *, addr, socklen_t *, addrlen, int, flags);
HANDLER_WRAPPERS_DEF(int, connect, int, socket, const struct sockaddr *, address, socklen_t, address_len);
HANDLER_WRAPPERS_DEF(int, shutdown, int, socket, int, how);
HANDLER_WRAPPERS_DEF(int, bind, int, socket, const struct sockaddr *, address, socklen_t, address_len);
HANDLER_WRAPPERS_DEF(int, listen, int, socket, int, backlog);
HANDLER_WRAPPERS_DEF(ssize_t, send, int, socket, const void *, message, size_t, length, int, flags);
HANDLER_WRAPPERS_DEF(ssize_t, recv, int, socket, void *, buffer, size_t, length, int, flags);
HANDLER_WRAPPERS_DEF(ssize_t, sendto, int, socket, const void *, message, size_t, length, int, flags, const struct sockaddr *, dest_addr, socklen_t, dest_len);
HANDLER_WRAPPERS_DEF(ssize_t, recvfrom, int, socket, void *, buffer, size_t, length, int, flags, struct sockaddr *, address, socklen_t *, address_len);
HANDLER_WRAPPERS_DEF(ssize_t, recvmsg, int, socket, struct msghdr *, message, int, flags);
HANDLER_WRAPPERS_DEF(ssize_t, sendmsg, int, socket, const struct msghdr *, message, int, flags);
HANDLER_WRAPPERS_DEF(int, getsockopt, int, socket, int, level, int, option_name, void *, option_value, socklen_t *, option_len);
HANDLER_WRAPPERS_DEF(int, setsockopt, int, socket, int, level, int, option_name, const void *, option_value, socklen_t, option_len);
HANDLER_WRAPPERS_DEF(int, getpeername, int, fd, struct sockaddr *, addr, socklen_t *, len);
HANDLER_WRAPPERS_DEF(int, getsockname, int, sockfd, struct sockaddr *, addr, socklen_t *, addrlen);
HANDLER_WRAPPERS_DEF(int, socketpair, int, domain, int, type, int, protocol, int *, socket_vector);
HANDLER_WRAPPERS_DEF(int, sockatmark, int, __fd);
HANDLER_WRAPPERS_DEF(int, isfdtype, int, __fd, int, __fdtype);
HANDLER_WRAPPERS_DEF(int, select, int, nfds, fd_set *, readfds, fd_set *, writefds, fd_set *, exceptfds, struct timeval *, timeout);
HANDLER_WRAPPERS_DEF(int, pselect, int, nfds, fd_set *, readfds, fd_set *, writefds, fd_set *, exceptfds, const struct timespec *, ntimeout, const sigset_t *, sigmask);
HANDLER_WRAPPERS_DEF(int, poll, struct pollfd *, fds, nfds_t, nfds, int, timeout);
HANDLER_WRAPPERS_DEF(int, ppoll, struct pollfd *, fds, nfds_t, nfds, const struct timespec *, timeout_ts, const sigset_t *, sigmask);
HANDLER_WRAPPERS_DEF(int, epoll_create, int, __size);
HANDLER_WRAPPERS_DEF(int, epoll_create1, int, __flags);
HANDLER_WRAPPERS_DEF(int, epoll_wait, int, __epfd, struct epoll_event *, __events, int, __maxevents, int, __timeout);
HANDLER_WRAPPERS_DEF(int, epoll_pwait, int, __epfd, struct epoll_event *, __events, int, __maxevents, int, __timeout, __const __sigset_t *, __ss);
HANDLER_WRAPPERS_DEF(int, epoll_ctl, int, __epfd, int, __op, int, __fd, struct epoll_event *, __event);
//HANDLER_WRAPPERS_DEF(uint32_t, htonl, uint32_t, hostlong);
//HANDLER_WRAPPERS_DEF(uint16_t, htons, uint16_t, hostshort);
//HANDLER_WRAPPERS_DEF(int, inet_aton, const char *, cp, struct in_addr *, inp);
//HANDLER_WRAPPERS_DEF(in_addr_t, inet_addr, const char *, cp);
//HANDLER_WRAPPERS_DEF(in_addr_t, inet_network, const char *, cp);
//HANDLER_WRAPPERS_DEF(char *, inet_ntoa, struct in_addr, in);
//HANDLER_WRAPPERS_DEF(uint32_t, ntohl, uint32_t, netlong);
//HANDLER_WRAPPERS_DEF(uint16_t, ntohs, uint16_t, netshort);
//HANDLER_WRAPPERS_DEF(in_addr_t, inet_lnaof, struct in_addr, in);
//HANDLER_WRAPPERS_DEF(in_addr_t, inet_netof, struct in_addr, in);
//HANDLER_WRAPPERS_DEF(const char *, inet_ntop, int, af, const void *, src, char *, dst, socklen_t, size);
//HANDLER_WRAPPERS_DEF(int, inet_pton, int, af, const char *, src, void *, dst);
//HANDLER_WRAPPERS_DEF(int, getaddrinfo, const char *, node, const char *, service, const struct addrinfo *, hints, struct addrinfo **, res);
//HANDLER_WRAPPERS_DEF(void, freeaddrinfo, struct addrinfo *res);
//HANDLER_WRAPPERS_DEF(const char *PROBE_NAME(gai_strerror, int errcode);
//HANDLER_WRAPPERS_DEF(int, gai_suspend, const struct gaicb* const list[], int nitems, const struct timespec *timeout);
//HANDLER_WRAPPERS_DEF(int, gai_error, struct gaicb *req);
//HANDLER_WRAPPERS_DEF(int, gai_cancel, struct gaicb *req);
//HANDLER_WRAPPERS_DEF(int, getaddrinfo_a, int mode, struct gaicb *list[], int nitems, struct sigevent *sevp);
//HANDLER_WRAPPERS_DEF(int, getdomainname, char *name, size_t len);
//HANDLER_WRAPPERS_DEF(int, setdomainname, const char *name, size_t len);
//HANDLER_WRAPPERS_DEF(int, gethostname, char *name, size_t len);
//HANDLER_WRAPPERS_DEF(int, sethostname, const char *name, size_t len);
//HANDLER_WRAPPERS_DEF(int, getnameinfo, const struct sockaddr *sa, socklen_t salen, char *host, socklen_t hostlen, char *serv, socklen_t servlen, unsigned int flags);
//HANDLER_WRAPPERS_DEF(struct hostent *PROBE_NAME(gethostbyname, const char *name);
//HANDLER_WRAPPERS_DEF(struct hostent *PROBE_NAME(gethostbyaddr, const void *addr, socklen_t len, int type);
//HANDLER_WRAPPERS_DEF(void, sethostent, int stayopen);
//HANDLER_WRAPPERS_DEF(void, endhostent, void);
//HANDLER_WRAPPERS_DEF(void, herror, const char *s);
//HANDLER_WRAPPERS_DEF(const char *PROBE_NAME(hstrerror, int err);
//HANDLER_WRAPPERS_DEF(struct hostent *PROBE_NAME(gethostent, void);
//HANDLER_WRAPPERS_DEF(struct hostent *PROBE_NAME(gethostbyname2, const char *name, int af);
//HANDLER_WRAPPERS_DEF(int, gethostent_r, struct hostent *rret, char *buf, size_t buflen, struct hostent **result, int *h_errnop);
//HANDLER_WRAPPERS_DEF(int, gethostbyaddr_r, const void *addr, socklen_t len, int type, struct hostent *rret, char *buf, size_t buflen, struct hostent **result, int *h_errnop);
//HANDLER_WRAPPERS_DEF(int, gethostbyname_r, const char *name, struct hostent *rret, char *buf, size_t buflen, struct hostent **result, int *h_errnop);
//HANDLER_WRAPPERS_DEF(int, gethostbyname2_r, const char *name, int af, struct hostent *rret, char *buf, size_t buflen, struct hostent **result, int *h_errnop);
//HANDLER_WRAPPERS_DEF(struct servent *PROBE_NAME(getservbyname, const char *name, const char *proto);
//HANDLER_WRAPPERS_DEF(void, setservent, int stayopen);
//HANDLER_WRAPPERS_DEF(void, endservent, void);
//HANDLER_WRAPPERS_DEF(struct servent *PROBE_NAME(getservent, void);
//HANDLER_WRAPPERS_DEF(struct servent *PROBE_NAME(getservbyport, int port, const char *proto);
//HANDLER_WRAPPERS_DEF(int, getservent_r, struct servent *result_buf, char *buf, size_t buflen, struct servent **result);
//HANDLER_WRAPPERS_DEF(int, getservbyname_r, const char *name, const char *proto, struct servent *result_buf, char *buf, size_t buflen, struct servent **result);
//HANDLER_WRAPPERS_DEF(int, getservbyport_r, int port, const char *proto, struct servent *result_buf, char *buf, size_t buflen, struct servent **result);
//HANDLER_WRAPPERS_DEF(struct netent*, getnetent, void);
//HANDLER_WRAPPERS_DEF(struct netent *PROBE_NAME(getnetbyname, const char *name);
//HANDLER_WRAPPERS_DEF(struct netent *PROBE_NAME(getnetbyaddr, uint32_t net, int type);
//HANDLER_WRAPPERS_DEF(void, setnetent, int stayopen);
//HANDLER_WRAPPERS_DEF(void, endnetent, void);
//HANDLER_WRAPPERS_DEF(int, getnetent_r, struct netent *result_buf, char *buf, size_t buflen, struct netent **result, int *h_errnop);
//HANDLER_WRAPPERS_DEF(int, getnetbyname_r, const char *name, struct netent *result_buf, char *buf, size_t buflen, struct netent **result, int *h_errnop);
//HANDLER_WRAPPERS_DEF(int, getnetbyaddr_r, uint32_t net, int type, struct netent *result_buf, char *buf, size_t buflen, struct netent **result, int *h_errnop);
//HANDLER_WRAPPERS_DEF(struct protoent *PROBE_NAME(getprotoent, void);
//HANDLER_WRAPPERS_DEF(struct protoent *PROBE_NAME(getprotobyname, const char *name);
//HANDLER_WRAPPERS_DEF(struct protoent *PROBE_NAME(getprotobynumber, int proto);
//HANDLER_WRAPPERS_DEF(void, setprotoent, int stayopen);
//HANDLER_WRAPPERS_DEF(void, endprotoent, void);
//HANDLER_WRAPPERS_DEF(int, getprotoent_r, struct protoent *result_buf, char *buf, size_t buflen, struct protoent **result);
//HANDLER_WRAPPERS_DEF(int, getprotobyname_r, const char *name, struct protoent *result_buf, char *buf, size_t buflen, struct protoent **result);
//HANDLER_WRAPPERS_DEF(int, getprotobynumber_r, int proto, struct protoent *result_buf, char *buf, size_t buflen, struct protoent **result);
//HANDLER_WRAPPERS_DEF(unsigned int, if_nametoindex, __const char *__ifname);
//HANDLER_WRAPPERS_DEF(char *PROBE_NAME(if_indextoname, unsigned int __ifindex, char *__ifname);
//HANDLER_WRAPPERS_DEF(struct if_nameindex *PROBE_NAME(if_nameindex, void);
//HANDLER_WRAPPERS_DEF(void, if_freenameindex, struct if_nameindex *__ptr);
//HANDLER_WRAPPERS_DEF(int, getifaddrs, struct ifaddrs **ifap);
//HANDLER_WRAPPERS_DEF(void, freeifaddrs, struct ifaddrs *ifa);
//HANDLER_WRAPPERS_DEF(uint16_t, htobe16, uint16_t host_16bits);
//HANDLER_WRAPPERS_DEF(uint16_t, htole16, uint16_t host_16bits);
//HANDLER_WRAPPERS_DEF(uint16_t, be16toh, uint16_t big_endian_16bits);
//HANDLER_WRAPPERS_DEF(uint16_t, le16toh, uint16_t little_endian_16bits);
//HANDLER_WRAPPERS_DEF(uint32_t, htobe32, uint32_t host_32bits);
//HANDLER_WRAPPERS_DEF(uint32_t, htole32, uint32_t host_32bits);
//HANDLER_WRAPPERS_DEF(uint32_t, be32toh, uint32_t big_endian_32bits);
//HANDLER_WRAPPERS_DEF(uint32_t, le32toh, uint32_t little_endian_32bits);
//HANDLER_WRAPPERS_DEF(uint64_t, htobe64, uint64_t host_64bits);
//HANDLER_WRAPPERS_DEF(uint64_t, htole64, uint64_t host_64bits);
//HANDLER_WRAPPERS_DEF(uint64_t, be64toh, uint64_t big_endian_64bits);
//HANDLER_WRAPPERS_DEF(uint64_t, le64toh, uint64_t little_endian_64bits);
//HANDLER_WRAPPERS_DEF(struct in_addr, inet_makeaddr, int net, int host);

#endif /* __LIBDASOCKET_H__ */
